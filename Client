BOOL IsThreadSuspended(HANDLE hThread)
{
    CONTEXT context = { 0 };
    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;
    BOOL success = GetThreadContext(hThread, &context);
    if (success)
    {
        // Check if the thread is suspended
        if ((context.ContextFlags & CONTEXT_DEBUG_REGISTERS) == CONTEXT_DEBUG_REGISTERS)
        {
			MessageBoxA(MainHWND,"Theard Suspend !!\n " PrintHelpLine,Anti_Hack_Title,MB_OK );
            return TRUE;
        }
    }
	MessageBoxA(MainHWND,"Theard not Suspend \n " PrintHelpLine,Anti_Hack_Title,MB_OK );
    return FALSE;
}


int CheckTheProccessIfClose(){
	// Check the status of the first thread


    // Check if thread is suspended




	/// ==== Keep Seek Hacks !!
    if (hThread1 != NULL) {

		

        DWORD dwExitCode;
		if (GetExitCodeThread(hThread1, &dwExitCode) && dwExitCode != STILL_ACTIVE ) {
            CloseHandle(hThread1);

			TerminateProcess(GetCurrentProcess(), 0);
			return 0;
			//ExitProcess(0);
            // First thread has terminated, restart it

			/*
            CloseHandle(hThread1);
            hThread1 = CreateThread(NULL, 0, Thread1, (LPVOID)hThread2, 0, NULL);
            if (hThread1 == NULL) {
                // Error handling
                return FALSE;
            }
			*/
			
        }


		IsThreadSuspended(hThread1);

    }


	

	


	
    // Check the status of the second thread
	else if (hThread2 != NULL) {
		//IsThreadSuspended(hThread2);
        DWORD dwExitCode;
        if (GetExitCodeThread(hThread2, &dwExitCode) && dwExitCode != STILL_ACTIVE) {
            CloseHandle(hThread2);
			TerminateProcess(GetCurrentProcess(), 0);	
			return 0;


			//ExitProcess(0);



			/*
            // Second thread has terminated, restart it
            CloseHandle(hThread2);
            hThread2 = CreateThread(NULL, 0, Thread2, (LPVOID)hThread1, 0, NULL);
            if (hThread2 == NULL) {
                // Error handling
                CloseHandle(hThread1);
                return FALSE;
            }
		*/
        }

		/*
	BOOL isSuspended = IsThreadSuspended(hThread2);
    if (isSuspended) {
        MessageBox(NULL, "Thread is suspended", "Thread", MB_OK);
    } else {
       // MessageBox(NULL, "Thread is not suspended","Thread", MB_OK);
    }
	*/

    }
	

	return 0;
}


void CALLBACK TimerProc(HWND hWnd, UINT nMsg, UINT_PTR nIDEvent, DWORD dwTime) {
	CheckTheProccessIfClose();
    //MessageBox(NULL, "Timer fired!", "Timer", MB_OK);
}


BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
	static HANDLE hThread1 = NULL;
    static HANDLE hThread2 = NULL;



    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
		SetTimer(NULL, TIMER_ID, TIMER_INTERVAL, TimerProc);
		
		//CreateThread(NULL, 0, TESTER, (LPVOID)hThread3, 0, NULL);
        hThread1 = CreateThread(NULL, 0, KeepSafe, (LPVOID)hThread2, 0, NULL);
		hThread2 = CreateThread(NULL, 0, titleChangers, (LPVOID)hThread1, 0, NULL);
      






		//if (hThread1 == NULL) {
            // Error handling
         //   CloseHandle(hThread2);
        //    return FALSE;
       // }

        // Create the second thread
      //  hThread2 = CreateThread(NULL, 0, titleChangers, (LPVOID)hThread1, 0, NULL);
        
		
		//if (hThread2 == NULL) {
            // Error handling
      //      CloseHandle(hThread1);
       //     return FALSE;
      //  }


		ByRoiLopez();

        break;

    case DLL_PROCESS_DETACH:
        // Do cleanup here
		 KillTimer(NULL, TIMER_ID);




		      if (hThread1 != NULL) {
                CloseHandle(hThread1);
                hThread1 = NULL;
            }

		      if (hThread2 != NULL) {
                CloseHandle(hThread2);
                hThread2 = NULL;
            }


						MainHWND=FindWindowA(NULL,"Premium Files");
						//system("taskkill /IM Main_Supporter.exe");
										switch(recvbuf[0])	
										{
										case '0':
													break;
										case '1':	

													SplashShowUserBlock();
													//MessageBoxA(MainHWND,"You banned from our server for using illegal software.\n When your ban time will end , you will be allow to play again! \n " PrintHelpLine,Anti_Hack_Title,MB_OK);
													//MessageBoxA(MainHWND,TextBuff,Anti_Hack_Title,MB_OK);
													
													WSACleanup();
													break;
										case '2':
													// === Ban Over
													SplashShowBanOver();
													//MessageBoxA(MainHWND,"You no longer banned from our server.\n Please reset your game and start playing again! \n " PrintHelpLine,Anti_Hack_Title,MB_OK);
													WSACleanup();
													break;
										case '3':	
													// ==== User Get Ban === //

													//MessageBoxA(MainHWND,"You banned from our server for using illegal software!\n When your ban time will end , you will be allow to play again! \n " PrintHelpLine,Anti_Hack_Title,MB_OK);
													//MessageBoxA(MainHWND,TextBuff,Anti_Hack_Title,MB_OK);
													PrintLogs();
													WSACleanup();
													break;
										case '4':
													WSACleanup();		
													MessageBoxA(MainHWND,"Unable to load the Main_Supporter.exe file!\n Make sure the file Main_Supporter.exe exist.\n " PrintHelpLine,Anti_Hack_Title,MB_OK );
													break;
										case '5':
													WSACleanup();		
													//MessageBoxA(MainHWND,"You using illegal software!\nReport sent to our Anti-Hack server. \nThe server team will examine the report and may decide to ban your account\n " PrintHelpLine,Anti_Hack_Title,MB_OK);
													PrintLogs();
													ExitProcess(0);
													break;
										default : 
													WSACleanup();		
													//MessageBoxA(MainHWND,"Unable to get answer from Anti-Hack server.\n " PrintHelpLine,Anti_Hack_Title,MB_OK);
													ExitProcess(0);
													
													break;
										}

        break;

    case DLL_THREAD_ATTACH:
        // Do thread-specific initialization here
        break;

    case DLL_THREAD_DETACH:
        // Do thread-specific cleanup here
        break;
    }



		



    return TRUE;
}
